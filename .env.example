# The base API URL to send requests to
# Must not have a trailing slash
API_UPSTREAM=http://127.0.0.1:8000

# The public-facing url for the accounts frontend
NEXT_PUBLIC_ACCOUNTS_URL=http://account.thehacker.localhost:3001

# The public-facing base API upstream URL
# Must not have a trailing slash
NEXT_PUBLIC_API_URL=http://api.thehacker.localhost:8000

# The Algolia app ID and API key for school search
NEXT_PUBLIC_ALGOLIA_APP_ID=
NEXT_PUBLIC_ALGOLIA_API_KEY=

# The ID of the Algolia index to use for schools
NEXT_PUBLIC_SCHOOLS_INDEX=schools

# The GraphQL schema source
# Available formats: https://the-guild.dev/graphql/codegen/docs/config-reference/schema-field#available-formats
GRAPHQL_SCHEMA_SOURCE=http://127.0.0.1:8000/graphql

# Additional headers to set when the schema source is a URL
# Formatted as a comma-separated list of key-value pairs
#GRAPHQL_SCHEMA_HEADERS=X-Hive-CDN-Key=abcdef,User-Agent=graphql-codegen

# Whether to interpret the URL response as introspection JSON or GraphQL SDL
# Only applicable when the schema source is a URL
#GRAPHQL_SCHEMA_IS_SDL=true

# The key to use for encrypting values that should only be accessible on the server-side (i.e. in RSC & during SSR)
# Must be a 256-bit key in base64 encoding (44 characters long, incl padding)
# One can be generated with:
#  crypto.subtle.generateKey({ name: "AES-GCM", length: 256}, true, ["encrypt", "decrypt"])
#    .then((key) => crypto.subtle.exportKey("raw", key))
#    .then((raw) => Buffer.from(raw).toString('base64'))
#    .then(console.log)
SSR_ONLY_KEY=

# The key to use for encrypting session data when transferring to event domains
# Must be a 256-bit key that is base64-encoded (44 characters long, incl padding)
# See above for generation method
EVENT_SESSION_KEY=

# The key to use for signing session transfer requests
# Must be a 256-bit key for a SHA-256 HMAC that is base64-encoded (88 characters long, incl padding)
# One can be generated with:
#  crypto.subtle.generateKey({ name: "HMAC", hash: "SHA-256" }, true, ["encrypt", "decrypt"])
#    .then((key) => crypto.subtle.exportKey("raw", key))
#    .then((raw) => Buffer.from(raw).toString('base64'))
#    .then(console.log)
EVENT_SIGNING_KEY=
